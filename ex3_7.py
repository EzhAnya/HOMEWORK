# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.


class OrganicCell:

    def __init__(self, number):
        self.number = int(number)

    def __add__(self, other):
        print(f'Клетки слиплись! Теперь в общей клетке {self.number + other.number} ячеек!')

    def __sub__(self, other):
        if self.number > other.number:
            print(f'Клетка съёжилась! От нее осталось {self.number - other.number} ячеек!')
        else:
            print(f'Ваше вычитание уничтожило клетку :( ')

    def __mul__(self, other):
        print(f'Клетки помножились друг на друга, и теперь это большущая клетка в {self.number * other.number} ячеек!')

    def __truediv__(self, other):
        print(f'Клетки поделились, но не так, как вы думали: теперь в одной общей клетке {self.number // other.number} '
              f'ячеек')

    def make_order(self,rowlen):
        line = ''
        for i in range(int(self.number) // int(rowlen)):
            line += ('*' * int(rowlen) + '\n')
        line += ('*' * (int(self.number) % int(rowlen)))
        print(line)


lelek = OrganicCell(76)
bolek = OrganicCell(28)

lelek.make_order(20)
lelek.__add__(bolek)
lelek.__sub__(bolek)
lelek.__mul__(bolek)
lelek.__truediv__(bolek)
